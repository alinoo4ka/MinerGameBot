from aiogram.enums import ParseMode
from aiogram import types, F, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import block_user, unblock_user, get_all_users, update_user_resources, get_user_resources_for_plasma_upgrade
import io
import logging

ADMIN_ID = 7765885209
RESOURCE_REQUEST = {}  
get_user_resources = get_user_resources_for_plasma_upgrade

def admin_panel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –°–ø–∏—Å–æ–∫", callback_data="list_users")
    builder.button(text="üö´ –ë–∞–Ω", callback_data="block_user")
    builder.button(text="üõ°Ô∏è –†–∞–∑–±–∞–Ω", callback_data="unblock_user")
    builder.button(text="ü™®", callback_data="give_—Ä—É–¥a")
    builder.button(text="ü™ô", callback_data="give_–º–æ–Ω–µ—Ç—ã")
    builder.button(text="üåÜ", callback_data="give_–ø–ª–∞–∑–º–∞")
    builder.adjust(1, 2, 3)
    return builder.as_markup()


blocking_user_id = None
unblocking_user_id = None


async def admin_panel(message: types.Message):
    await message.answer("üéõ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_panel_keyboard(), parse_mode=ParseMode.HTML)

async def list_users(query: types.CallbackQuery):
    users = get_all_users()
    if users:
        user_list = "\n".join(
            f"{i + 1}. {user[2]} @{user[1] or '–ù/–î'} {user[0]}"
            for i, user in enumerate(users)
        )

        file = io.StringIO(user_list)
        file.name = "user_list.txt"

        await query.message.answer_document(
            document=types.BufferedInputFile(
                file.getvalue().encode(), filename="user_list.txt"
            ),
            caption="<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>", parse_mode=ParseMode.HTML
        )
        await query.answer()
    else:
        await query.message.edit_text("‚ùì <b>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>", parse_mode=ParseMode.HTML)
        await query.answer()

async def block_user_command(query: types.CallbackQuery):
    global blocking_user_id
    blocking_user_id = query.from_user.id
    await query.message.answer(
        "üö´ <b>–í–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:</b>", parse_mode=ParseMode.HTML
    )
    await query.answer()


async def process_block_user(message: types.Message):
    global blocking_user_id
    try:
        user_id_to_block = int(message.text)
        block_user(user_id_to_block)
        await message.answer(
            f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id_to_block}</code> –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>",
            parse_mode=ParseMode.HTML
        )
        blocking_user_id = None
    except ValueError:
        await message.answer(
            "üìõ <b>–ù–µ–≤–µ—Ä–Ω—ã–π User ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>",
            parse_mode=ParseMode.HTML
        )

async def unblock_user_command(query: types.CallbackQuery):
    global unblocking_user_id
    unblocking_user_id = query.from_user.id
    await query.message.answer(
        "üõ°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:</b>", parse_mode=ParseMode.HTML
    )
    await query.answer()

async def process_unblock_user(message: types.Message):
    global unblocking_user_id
    try:
        user_id_to_unblock = int(message.text)
        unblock_user(user_id_to_unblock)
        await message.answer(
            f"üõ°Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id_to_unblock}</code> –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>",
            parse_mode=ParseMode.HTML
        )
        unblocking_user_id = None
    except ValueError:
        await message.answer(
            "üìõ <b>–ù–µ–≤–µ—Ä–Ω—ã–π User ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>",
            parse_mode=ParseMode.HTML
        )

async def process_admin_commands(message: types.Message, admin_id: int):
    if message.text == "/admin" and message.from_user.id == admin_id:
        await admin_panel(message)
        return True
    return False

async def give_resource_command(query: types.CallbackQuery, resource: str):
    """Generic handler for giving resources."""
    RESOURCE_REQUEST[query.from_user.id] = resource
    await query.message.answer(
        f"<b>–í–≤–µ–¥–∏—Ç–µ User ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {resource}, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'):</b>",
        parse_mode=ParseMode.HTML
    )
    await query.answer()

async def process_give_resource(message: types.Message, resource: str):
    """Generic processor for giving resources."""
    if message.from_user.id in RESOURCE_REQUEST and RESOURCE_REQUEST[message.from_user.id] == resource:
        try:
            user_id, amount = map(int, message.text.split())
            —Ä—É–¥a, –ø–ª–∞–∑–º–∞, –º–æ–Ω–µ—Ç—ã = get_user_resources(user_id)
            if resource == "—Ä—É–¥a":
                —Ä—É–¥a += amount
            elif resource == "–º–æ–Ω–µ—Ç—ã":
                –º–æ–Ω–µ—Ç—ã += amount
            elif resource == "–ø–ª–∞–∑–º–∞":
                –ø–ª–∞–∑–º–∞ += amount
            else:
                await message.answer("üìõ <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞</b>", parse_mode=ParseMode.HTML)
                return

            update_user_resources(user_id, —Ä—É–¥a, –ø–ª–∞–∑–º–∞, –º–æ–Ω–µ—Ç—ã)
            await message.answer(
                f"‚ú® <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> –≤—ã–¥–∞–Ω–æ <code>{amount}</code> {resource}</b>",
                parse_mode=ParseMode.HTML
            )
        except ValueError:
            await message.answer(
                "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ User ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>12345 10</code>).</b>",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–µ—Å—É—Ä—Å–∞: {e}")
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–µ—Å—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                parse_mode=ParseMode.HTML
            )
        finally:
            del RESOURCE_REQUEST[message.from_user.id]                

async def give_—Ä—É–¥a_command(query: types.CallbackQuery):
    await give_resource_command(query, "—Ä—É–¥a")

async def give_–º–æ–Ω–µ—Ç—ã_command(query: types.CallbackQuery):
    await give_resource_command(query, "–º–æ–Ω–µ—Ç—ã")

async def give_–ø–ª–∞–∑–º–∞_command(query: types.CallbackQuery):
    await give_resource_command(query, "–ø–ª–∞–∑–º–∞")
    
async def process_admin_callback(query: types.CallbackQuery, admin_id: int):
    if query.from_user.id == admin_id:
        if query.data == "list_users":
            await list_users(query)
            return True
        elif query.data == "block_user":
            await block_user_command(query)
            return True
        elif query.data == "unblock_user":
            await unblock_user_command(query)
            return True

    return False


async def process_admin_message(message: types.Message, admin_id: int):
    global blocking_user_id, unblocking_user_id

    if message.from_user.id == blocking_user_id:
        await process_block_user(message)
        return

    if message.from_user.id == unblocking_user_id:
        await process_unblock_user(message)
        return

    # Process giving resources
    if message.from_user.id in RESOURCE_REQUEST:
        resource = RESOURCE_REQUEST[message.from_user.id]
        await process_give_resource(message, resource)
        return

    if await process_admin_commands(message, admin_id):
        return
        
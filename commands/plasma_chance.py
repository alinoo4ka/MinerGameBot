from aiogram import types, F, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from database import get_plasma_chance_level, update_plasma_chance_level, get_user_resources_for_plasma_upgrade, update_user_resources

BASE_UPGRADE_COST = 25
MAX_CHANCE = 0.75

async def show_chance_level(message: types.Message):
    user_id = message.from_user.id
    chance_level = get_plasma_chance_level(user_id)
    chance_percentage = calculate_plasma_chance(chance_level) * 100
    
    if calculate_plasma_chance(chance_level) >= MAX_CHANCE:
        text = f"üåá –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–ª–∞–∑–º—ã: {chance_percentage:.2f}%\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å!"
        keyboard = None
    else:
        upgrade_cost = calculate_upgrade_cost(chance_level)
        text = f"üåá –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–ª–∞–∑–º—ã: {chance_percentage:.2f}%\n–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–¥–æ: {upgrade_cost} –º–æ–Ω–µ—Ç"
        keyboard = create_upgrade_keyboard(user_id)

    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


def create_upgrade_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üåá –£–ª—É—á—à–∏—Ç—å", callback_data="upgrade_chance")
    return builder.as_markup()

async def process_upgrade_callback(query: types.CallbackQuery):
    user_id = query.from_user.id
    —Ä—É–¥a, –ø–ª–∞–∑–º–∞, –º–æ–Ω–µ—Ç—ã = get_user_resources_for_plasma_upgrade(user_id)
    current_level = get_plasma_chance_level(user_id)
    upgrade_cost = calculate_upgrade_cost(current_level)

    try:
        if –º–æ–Ω–µ—Ç—ã >= upgrade_cost:
            new_–º–æ–Ω–µ—Ç—ã = –º–æ–Ω–µ—Ç—ã - upgrade_cost
            new_level = current_level + 1
            update_plasma_chance_level(user_id, new_level)
            update_user_resources(user_id, —Ä—É–¥a, –ø–ª–∞–∑–º–∞, new_–º–æ–Ω–µ—Ç—ã)
            chance_percentage = calculate_plasma_chance(new_level) * 100            
            if calculate_plasma_chance(new_level) >= MAX_CHANCE:
                text = f"üåá –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–ª–∞–∑–º—ã: {chance_percentage:.2f}%\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å!"
                keyboard = None
            else:
                next_upgrade_cost = calculate_upgrade_cost(new_level)
                text = f"üåá –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–ª–∞–∑–º—ã: {chance_percentage:.2f}%\n–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–¥–æ: {next_upgrade_cost} –º–æ–Ω–µ—Ç"
                keyboard = create_upgrade_keyboard(user_id)

            await query.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            await query.answer("–£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω!", parse_mode=ParseMode.HTML)
        else:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!", parse_mode=ParseMode.HTML)

    except Exception as e:
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode=ParseMode.HTML)
        print(f"–û—à–∏–±–∫–∞ –≤ process_upgrade_callback: {e}")

def calculate_plasma_chance(level: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–ª–∞–∑–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∫–∞—á–∫–∏."""
    base_chance = 0.05  
    increased_chance = level * 0.05  
    plasma_chance = min(base_chance + increased_chance, MAX_CHANCE)  
    return plasma_chance
    
def calculate_upgrade_cost(level: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è."""
    return BASE_UPGRADE_COST + (level * BASE_UPGRADE_COST)

def register_handlers(dp: Dispatcher):
    dp.callback_query.register(process_upgrade_callback, F.data == "upgrade_chance")
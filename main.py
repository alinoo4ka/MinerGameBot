import asyncio
import logging
import random
import re
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
import database
import admin_panel
from commands import level
from commands import breadwinner
from commands import plasma_chance
from commands import mban

BOT_TOKEN = "8031609683:AAGbcmlTkh96TWSRqLZwx-xnIj2P_QUT10M"  # Replace with your bot token
ADMIN_ID = 7765885209

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

texts = [
    "–¢–µ–∫—Å—Ç 0: –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç",
    "–¢–µ–∫—Å—Ç 1: –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç",
    "–¢–µ–∫—Å—Ç 2: –¢—Ä–µ—Ç–∏–π —Ç–µ–∫—Å—Ç",
]

blocking_user_id = None
unblocking_user_id = None

@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    await process_start_command(message)

@dp.message(Command("mban"))
async def mban_command_handler(message: types.Message):
    await mban.process_mban_command(message)
    
@dp.message(Command("munban"))
async def munban_command_handler(message: types.Message):
    await mban.process_munban_command(message)
    
@dp.message(Command("mmute"))
async def mkick_command_handler(message: types.Message):
    await mban.process_mute_command(message)    
        
@dp.message(Command("admin"))
async def admin_command_handler(message: types.Message):
    await admin_panel.admin_panel(message)

@dp.message(Command("lvl"))
async def level_command_handler(message: types.Message):
    await level.process_level_command(message)

@dp.message(F.text.lower().startswith("—É—Ä"))
async def level_command_handler(message: types.Message):
    await level.process_level_command(message)

@dp.message(F.text.lower().startswith("—É—Ä–æ–≤–µ–Ω—å"))
async def level_command_handler(message: types.Message):
    await level.process_level_command(message)

@dp.message(F.text.lower().startswith("–∫–æ–ø"))
async def dig_command_handler(message: types.Message):
    await breadwinner.dig_handler(message)

@dp.message(F.text.lower().startswith("–∫–æ–ø–∞—Ç—å"))
async def dig_command_handler(message: types.Message):
    await breadwinner.dig_handler(message)

@dp.message(F.text.lower().startswith("–ø—Ä–æ–¥–∞—Ç—å –≤—Å—ë"))
async def sell_all_command_handler(message: types.Message):
    await breadwinner.sell_all_handler(message)

@dp.message(Command("balance"))
async def balance_command_handler(message: types.Message):
    await show_balance(message)

@dp.message(F.text.lower().startswith("–±"))
async def balance_command_handler(message: types.Message):
    await show_balance(message)

@dp.message(Command("chance"))
async def chance_command_handler(message: types.Message):
    await plasma_chance.show_chance_level(message)

@dp.message(F.text.lower().startswith("—à–ø"))
async def chance_command_handler(message: types.Message):
    await plasma_chance.show_chance_level(message)

@dp.message(F.text.lower().startswith("—à–∞–Ω—Å –ø–ª–∞–∑–º—ã"))
async def chance_command_handler(message: types.Message):
    await plasma_chance.show_chance_level(message)

@dp.message(F.text.lower().startswith("—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫"))
async def change_nickname_handler(message: types.Message):
    await process_change_nickname(message)

@dp.message(F.text.lower().startswith("–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"))
async def transfer_command_handler(message: types.Message):
    if not message.reply_to_message:
        await message.reply("üö´ <b>–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã</b>", parse_mode=ParseMode.HTML)
        return

    sender_id = message.from_user.id
    receiver_id = message.reply_to_message.from_user.id

    if sender_id == receiver_id:
        await message.reply("üö´ <b>–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ</b>", parse_mode=ParseMode.HTML)
        return

    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <code>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}</code>", parse_mode=ParseMode.HTML)
            return
        amount = int(parts[1])

        if amount <= 0:
            await message.reply("üö´ <b>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º</b>", parse_mode=ParseMode.HTML)
            return
    except ValueError:
        await message.reply("üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b>", parse_mode=ParseMode.HTML)
        return

    conn = sqlite3.connect(database.DATABASE_FILE)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT money FROM users WHERE user_id = ?", (sender_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply("üö´ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", parse_mode=ParseMode.HTML)
            return

        sender_balance = result[0]

        if sender_balance < amount:            
            await message.reply("üö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>", parse_mode=ParseMode.HTML)
            return

        cursor.execute("UPDATE users SET money = money - ? WHERE user_id = ?", (amount, sender_id))
        cursor.execute("UPDATE users SET money = money + ? WHERE user_id = ?", (amount, receiver_id))

        conn.commit()

        await message.reply(f"üí∏ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ <code>{amount}</code> –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{message.reply_to_message.from_user.first_name}</code></b>", parse_mode=ParseMode.HTML)

        try:
            await bot.send_message(receiver_id, f"üí∏ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{message.from_user.first_name}</code> –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º <code>{amount}</code> –º–æ–Ω–µ—Ç</b>", parse_mode=ParseMode.HTML)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {e}")
            await message.reply("üö´ <b>–û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ç—ã:</b>\n<b>–ø–µ—Ä–µ–≤–µ–ª –¥–µ–Ω—å–≥–∏ —á–µ–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–ø–∏—Å–∞–ª <code>/start</code> –≤ –±–æ—Ç–∞</b>\n<b>–ø–µ—Ä–µ–≤–µ–ª –¥–µ–Ω—å–≥–∏ –±–æ—Ç—É/–∫–∞–Ω–∞–ª—É</b>\n<b>–µ—â–µ –∫–∞–∫-—Ç–æ —Ö–æ—Ç–µ–ª –æ–±–º–∞–Ω—É—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥, —Ç–æ –∑–Ω–∞–π: —è —Å–ø–∏—Å–∞–ª —É —Ç–µ–±—è —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ —Ç—ã –ø—Ä–∞–≤–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–ª –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç –≤ –±–æ—Ç–µ, –µ—Å–ª–∏ —Ç—ã –ø—Ä–∞–≤–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–ª –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç –≤ –±–æ—Ç–µ, —Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–Ω—å–≥–∏ —É–∂–µ –±—É–¥—É—Ç —É –Ω–µ–≥–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>", parse_mode=ParseMode.HTML)
    except sqlite3.Error as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await message.reply("üö´ <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>", parse_mode=ParseMode.HTML)

    finally:
        conn.close()
                    
@dp.message(F.text.lower().startswith("–±–∞–ª–∞–Ω—Å"))
async def balance_command_handler(message: types.Message):
    await show_balance(message)

@dp.message(Command("inline"))
async def command_inline_handler(message: types.Message) -> None:
    await process_inline_command(message)

@dp.message()
async def message_handler(message: types.Message):
    await admin_panel.process_admin_message(message, ADMIN_ID)

@dp.callback_query(F.data == "list_users")
async def list_users_callback(query: types.CallbackQuery):
    if query.from_user.id == ADMIN_ID:
        await admin_panel.list_users(query)

@dp.callback_query(F.data == "block_user")
async def block_user_callback(query: types.CallbackQuery):
    global blocking_user_id
    if query.from_user.id == ADMIN_ID:
        blocking_user_id = query.from_user.id
        await admin_panel.block_user_command(query)

@dp.callback_query(F.data == "unblock_user")
async def unblock_user_callback(query: types.CallbackQuery):
    global unblocking_user_id
    if query.from_user.id == ADMIN_ID:
        unblocking_user_id = query.from_user.id
        await admin_panel.unblock_user_command(query)

dp.callback_query.register(admin_panel.give_—Ä—É–¥a_command, F.data == "give_—Ä—É–¥a")
dp.callback_query.register(admin_panel.give_–º–æ–Ω–µ—Ç—ã_command, F.data == "give_–º–æ–Ω–µ—Ç—ã")
dp.callback_query.register(admin_panel.give_–ø–ª–∞–∑–º–∞_command, F.data == "give_–ø–ª–∞–∑–º–∞")

dp.callback_query.register(level.process_upgrade_callback, F.data == "upgrade_level")
dp.callback_query.register(plasma_chance.process_upgrade_callback, F.data == "upgrade_chance")

async def show_balance(message: types.Message):
    user_id = message.from_user.id
    nickname = database.get_user_nickname(user_id)

    if not nickname:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    try:
        —Ä—É–¥a, plasma, money = database.get_user_resources_for_plasma_upgrade(user_id)
        await message.answer(
            f"{nickname}, –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
            f"–†—É–¥–∞: {—Ä—É–¥a}\n"
            f"–ü–ª–∞–∑–º–∞: {plasma}\n"
            f"–ú–æ–Ω–µ—Ç—ã: {money}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_start_command(message: types.Message):
    user = message.from_user
    if user:
        if database.is_user_blocked(user.id):
            await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return

        if database.is_user_registered(user.id):
            nickname = database.get_user_nickname(user.id)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {nickname}! –Ø —Ç–µ–±—è —É–∂–µ –∑–Ω–∞—é.")
        else:
            nickname = database.register_new_user(user.id, user.username, user.first_name, user.last_name)
            if nickname:
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {nickname}")
                await message.answer(
                    f"–ü—Ä–∏–≤–µ—Ç, {nickname}! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è."
                )
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        random_text1 = random.choice(texts)
        random_text2 = random.choice(texts)
        await message.answer(f"–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç 1:\n{random_text1}")
        await message.answer(f"–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç 2:\n{random_text2}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

async def process_inline_command(message: types.Message) -> None:
    user = message.from_user
    if user:
        if database.is_user_blocked(user.id):
            return
        await message.answer(
            texts[0], reply_markup=create_inline_keyboard(0)
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

def create_inline_keyboard(current_index: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if current_index == 2:
        builder.button(text="–¢–µ–∫—Å—Ç 1", callback_data="text_1")
    elif current_index == 0:
        builder.button(text="–¢–µ–∫—Å—Ç 1", callback_data="text_1")
    elif current_index == 1:
        builder.button(text="–¢–µ–∫—Å—Ç 2", callback_data="text_2")
        builder.button(text="–¢–µ–∫—Å—Ç 0", callback_data="text_0")

    return builder.as_markup()

async def process_change_nickname(message: types.Message):
    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ù–æ–≤—ã–π_–ù–∏–∫")
        return

    new_nickname = parts[2]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ –Ω–∏–∫–Ω–µ–π–º—É
    if not re.match(r'^[–∞-—è–ê-–Øa-zA-Z0-9+_\!\-#]+$', new_nickname):
        await message.reply("–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +_!-# –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect(database.DATABASE_FILE)
    cursor = conn.cursor()

    try:
        cursor.execute("UPDATE users SET nickname = ? WHERE user_id = ?", (new_nickname, user_id))
        conn.commit()
        await message.reply(f"–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_nickname}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
        conn.rollback()
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–Ω–µ–π–º–∞.")
    finally:
        conn.close()

async def main() -> None:
    database.init_db()

    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
    